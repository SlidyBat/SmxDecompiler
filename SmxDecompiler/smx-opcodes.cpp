#include "smx-opcodes.h"

static SmxInstrInfo err_instr = { "err", 0, {} };

static SmxInstrInfo instrs[] =
{
	{ "none", 0, {} },
	{ "load.pri", 1, {SmxParam::ADDRESS} },
	{ "load.alt", 1, {SmxParam::ADDRESS} },
	{ "load.s.pri", 1, {SmxParam::STACK} },
	{ "load.s.alt", 1, {SmxParam::STACK} },
	{ "lref.pri", -1, {} },
	{ "lref.alt", -1, {} },
	{ "lref.s.pri", 1, {SmxParam::STACK} },
	{ "lref.s.alt", 1, {SmxParam::STACK} },
	{ "load.i", 0, {} },
	{ "lodb.i", 1, {SmxParam::CONSTANT} },
	{ "const.pri", 1, {SmxParam::CONSTANT} },
	{ "const.alt", 1, {SmxParam::CONSTANT} },
	{ "addr.pri", 1, {SmxParam::STACK} },
	{ "addr.alt", 1, {SmxParam::STACK} },
	{ "stor.pri", 1, {SmxParam::ADDRESS} },
	{ "stor.alt", 1, {SmxParam::ADDRESS} },
	{ "stor.s.pri", 1, {SmxParam::STACK} },
	{ "stor.s.alt", 1, {SmxParam::STACK} },
	{ "sref.pri", -1, {} },
	{ "sref.alt", -1, {} },
	{ "sref.s.pri", 1, {SmxParam::STACK} },
	{ "sref.s.alt", 1, {SmxParam::STACK} },
	{ "stor.i", 0, {} },
	{ "strb.i", 1, {SmxParam::CONSTANT} },
	{ "lidx", 0, {} },
	{ "lidx.b", -1, {} },
	{ "idxaddr", 0, {} },
	{ "idxaddr.b", -1, {} },
	{ "align.pri", -1, {} },
	{ "align.alt", -1, {} },
	{ "lctrl", -1, {} },
	{ "sctrl", -1, {} },
	{ "move.pri", 0, {} },
	{ "move.alt", 0, {} },
	{ "xchg", 0, {} },
	{ "push.pri", 0, {} },
	{ "push.alt", 0, {} },
	{ "push.r", -1, {} },
	{ "push.c", 1, {SmxParam::CONSTANT} },
	{ "push", 1, {SmxParam::ADDRESS} },
	{ "push.s", 1, {SmxParam::STACK} },
	{ "pop.pri", 0, {} },
	{ "pop.alt", 0, {} },
	{ "stack", 1, {SmxParam::CONSTANT} },
	{ "heap", 1, {SmxParam::CONSTANT} },
	{ "proc", 0, {} },
	{ "ret", -1, {} },
	{ "retn", 0, {} },
	{ "call", 1, {SmxParam::FUNCTION} },
	{ "call.pri", -1, {} },
	{ "jump", 1, {SmxParam::JUMP} },
	{ "jrel", -1, {} },
	{ "jzer", 1, {SmxParam::JUMP} },
	{ "jnz", 1, {SmxParam::JUMP} },
	{ "jeq", 1, {SmxParam::JUMP} },
	{ "jneq", 1, {SmxParam::JUMP} },
	{ "jless", -1, {} },
	{ "jleq", -1, {} },
	{ "jgrtr", -1, {} },
	{ "jgeq", -1, {} },
	{ "jsless", 1, {SmxParam::JUMP} },
	{ "jsleq", 1, {SmxParam::JUMP} },
	{ "jsgrtr", 1, {SmxParam::JUMP} },
	{ "jsgeq", 1, {SmxParam::JUMP} },
	{ "shl", 0, {} },
	{ "shr", 0, {} },
	{ "sshr", 0, {} },
	{ "shl.c.pri", 1, {SmxParam::CONSTANT} },
	{ "shl.c.alt", 1, {SmxParam::CONSTANT} },
	{ "shr.c.pri", 1, {SmxParam::CONSTANT} },
	{ "shr.c.alt", 1, {SmxParam::CONSTANT} },
	{ "smul", 0, {} },
	{ "sdiv", 0, {} },
	{ "sdiv.alt", 0, {} },
	{ "umul", -1, {} },
	{ "udiv", -1, {} },
	{ "udiv.alt", -1, {} },
	{ "add", 0, {} },
	{ "sub", 0, {} },
	{ "sub.alt", 0, {} },
	{ "and", 0, {} },
	{ "or", 0, {} },
	{ "xor", 0, {} },
	{ "not", 0, {} },
	{ "neg", 0, {} },
	{ "invert", 0, {} },
	{ "add.c", 1, {SmxParam::CONSTANT} },
	{ "smul.c", 1, {SmxParam::CONSTANT} },
	{ "zero.pri", 0, {} },
	{ "zero.alt", 0, {} },
	{ "zero", 1, {SmxParam::ADDRESS} },
	{ "zero.s", 1, {SmxParam::STACK} },
	{ "sign.pri", -1, {} },
	{ "sign.alt", -1, {} },
	{ "eq", 0, {} },
	{ "neq", 0, {} },
	{ "less", -1, {} },
	{ "leq", -1, {} },
	{ "grtr", -1, {} },
	{ "geq", -1, {} },
	{ "sless", 0, {} },
	{ "sleq", 0, {} },
	{ "sgrtr", 0, {} },
	{ "sgeq", 0, {} },
	{ "eq.c.pri", 1, {SmxParam::CONSTANT} },
	{ "eq.c.alt", 1, {SmxParam::CONSTANT} },
	{ "inc.pri", 0, {} },
	{ "inc.alt", 0, {} },
	{ "inc", 1, {SmxParam::ADDRESS} },
	{ "inc.s", 1, {SmxParam::STACK} },
	{ "inc.i", 0, {} },
	{ "dec.pri", 0, {} },
	{ "dec.alt", 0, {} },
	{ "dec", 1, {SmxParam::ADDRESS} },
	{ "dec.s", 1, {SmxParam::STACK} },
	{ "dec.i", 0, {} },
	{ "movs", 1, {SmxParam::CONSTANT} },
	{ "cmps", -1, {} },
	{ "fill", 1, {SmxParam::CONSTANT} },
	{ "halt", 1, {SmxParam::CONSTANT} },
	{ "bounds", 1, {SmxParam::CONSTANT} },
	{ "sysreq.pri", -1, {} },
	{ "sysreq.c", 1, {SmxParam::NATIVE} },
	{ "file", -1, {} },
	{ "line", -1, {} },
	{ "symbol", -1, {} },
	{ "srange", -1, {} },
	{ "jump.pri", -1, {} },
	{ "switch", 1, {SmxParam::JUMP} },
	{ "casetbl", 2, {SmxParam::CONSTANT, SmxParam::JUMP} },
	{ "swap.pri", 0, {} },
	{ "swap.alt", 0, {} },
	{ "push.adr", 1, {SmxParam::STACK} },
	{ "nop", 0, {} },
	{ "sysreq.n", 2, {SmxParam::NATIVE, SmxParam::CONSTANT} },
	{ "symtag", -1, {} },
	{ "break", 0, {} },
	{ "push2.c", 2, {SmxParam::CONSTANT, SmxParam::CONSTANT} },
	{ "push2", 2, {SmxParam::ADDRESS, SmxParam::ADDRESS} },
	{ "push2.s", 2, {SmxParam::STACK, SmxParam::STACK} },
	{ "push2.adr", 2, {SmxParam::STACK, SmxParam::STACK} },
	{ "push3.c", 3, {SmxParam::CONSTANT, SmxParam::CONSTANT, SmxParam::CONSTANT} },
	{ "push3", 3, {SmxParam::ADDRESS, SmxParam::ADDRESS, SmxParam::ADDRESS} },
	{ "push3.s", 3, {SmxParam::STACK, SmxParam::STACK, SmxParam::STACK} },
	{ "push3.adr", 3, {SmxParam::STACK, SmxParam::STACK, SmxParam::STACK} },
	{ "push4.c", 4, {SmxParam::CONSTANT, SmxParam::CONSTANT, SmxParam::CONSTANT, SmxParam::CONSTANT} },
	{ "push4", 4, {SmxParam::ADDRESS, SmxParam::ADDRESS, SmxParam::ADDRESS, SmxParam::ADDRESS} },
	{ "push4.s", 4, {SmxParam::STACK, SmxParam::STACK, SmxParam::STACK, SmxParam::STACK} },
	{ "push4.adr", 4, {SmxParam::STACK, SmxParam::STACK, SmxParam::STACK, SmxParam::STACK} },
	{ "push5.c", 5, {SmxParam::CONSTANT, SmxParam::CONSTANT, SmxParam::CONSTANT, SmxParam::CONSTANT, SmxParam::CONSTANT} },
	{ "push5", 5, {SmxParam::ADDRESS, SmxParam::ADDRESS, SmxParam::ADDRESS, SmxParam::ADDRESS, SmxParam::ADDRESS} },
	{ "push5.s", 5, {SmxParam::STACK, SmxParam::STACK, SmxParam::STACK, SmxParam::STACK, SmxParam::STACK} },
	{ "push5.adr", 5, {SmxParam::STACK, SmxParam::STACK, SmxParam::STACK, SmxParam::STACK, SmxParam::STACK} },
	{ "load.both", 2, {SmxParam::ADDRESS, SmxParam::ADDRESS} },
	{ "load.s.both", 2, {SmxParam::STACK, SmxParam::STACK} },
	{ "const", 2, {SmxParam::ADDRESS, SmxParam::CONSTANT} },
	{ "const.s", 2, {SmxParam::STACK, SmxParam::CONSTANT} },
	{ "sysreq.d", -1, {} },
	{ "sysreq.nd", -1, {} },
	{ "trk.push.c", 1, {SmxParam::CONSTANT} },
	{ "trk.pop", 0, {} },
	{ "genarray", 1, {SmxParam::CONSTANT} },
	{ "genarray.z", 1, {SmxParam::CONSTANT} },
	{ "stradjust.pri", 0, {} },
	{ "stackadjust", -1, {} },
	{ "endproc", 0, {} },
	{ "ldgfn.pri", -1, {} },
	{ "rebase", 3, {SmxParam::ADDRESS, SmxParam::CONSTANT, SmxParam::CONSTANT} },
	{ "initarray.pri", 5, {SmxParam::ADDRESS, SmxParam::CONSTANT, SmxParam::CONSTANT, SmxParam::CONSTANT, SmxParam::CONSTANT} },
	{ "initarray.alt", 5, {SmxParam::ADDRESS, SmxParam::CONSTANT, SmxParam::CONSTANT, SmxParam::CONSTANT, SmxParam::CONSTANT} },
	{ "heap.save", 0, {} },
	{ "heap.restore", 0, {} },
	{ "firstfake", -1, {} },
	{ "fabs", 0, {} },
	{ "float", 0, {} },
	{ "float.add", 0, {} },
	{ "float.sub", 0, {} },
	{ "float.mul", 0, {} },
	{ "float.div", 0, {} },
	{ "round", 0, {} },
	{ "floor", 0, {} },
	{ "ceil", 0, {} },
	{ "rndtozero", 0, {} },
	{ "float.cmp", 0, {} },
	{ "float.gt", 0, {} },
	{ "float.ge", 0, {} },
	{ "float.lt", 0, {} },
	{ "float.le", 0, {} },
	{ "float.ne", 0, {} },
	{ "float.eq", 0, {} },
	{ "float.not", 0, {} },
};

const SmxInstrInfo& SmxInstrInfo::Get( SmxOpcode op )
{
	if( op >= 0 && op < SMX_OPCODES_TOTAL )
	{
		return instrs[op];
	}
	return err_instr;
}
const SmxInstrInfo& SmxInstrInfo::Get( uint32_t op )
{
	if( op >= 0 && op < SMX_OPCODES_TOTAL )
	{
		return instrs[op];
	}
	return err_instr;
}